---
title: "[Chapter 1.Node.js에 대해서] 1.1 Node.js 철학"
date: 2019-04-23 20:56:00
categories: nodejs designpattern
---

## 1.1 Node.js 철학

### 1.1.1 경량 코어

- 코어를 최소한의 기능 세트로 하고, 나머지를 소위 사용자의 몫(사용자 영역)으로 해서, 핵심 모듈의 바깥 영역 모듈들을 생태계에 맡기는 것
- 핵심 기능 세트를 최소한으로 유지하면, 유지 보수 측면에서 편리할 뿐만 아니라 전체 생태계의 발전에 긍정적인 문화적 영향을 가져올 수 있음

### 1.1.2 경량 모듈

- Node.js는 모듈 개념을 프로그램 코드를 구성하는 기본 수단으로 사용하며, 이것은 어플리케이션과 패키지라고 하는 재사용 가능한 라이브러리를 만들기 위한 조립용 블록임

- Node.js에서 가장 널리 퍼진 원칙 중 하나는, 코드 크기뿐만 아니라 범위적인 면에서도 작은 모듈을 설계하는 것

- 위 원칙은 유닉스 철학에 뿌리를 두는데, 특히 다음과 같은 두 계율이 있음.

  > **작은 것이 아름답다**
  >
  > **각 프로그램이 각기 한 가지 역할을 잘 하도록 만든다**

- Node의 방식은 어플리케이션을 작고 잘 집중화된 수많은 의존성들로 구성하여 재사용성을 극도록 높임

- 작은 모듈은 장점은 아래와 같다.

  > **재사용성**
  >
  > **이해하기 쉽고 사용하기 쉽다**
  >
  > **테스트 및 유지보수가 훨씬 간단하다**
  >
  > **브라우저와 완벽한 공유가 가능하다**

- 더 작고 집중된 모듈을 사용하면 작은 코드 조각이라 해도 모두가 공유하거나 재사용할 수 있다. 

  이것은 **DRY(Don't Repeat Yourself, 같은 것을 반복하지 말라)** 원칙에 대한 새로운 차원의 적용이다.

### 1.1.3 작은 외부 인터페이스

- Node.js 모듈은 크기와 범위가 작을 뿐만 아니라 대게 최소한의 기능을 노출하는 특성을 가지고 있다. 

  > 이에 가장 큰 이점은 API의 유용성이 향상된다.
  >
  > 즉, API 사용이 보다 명확해지고 잘못된 사용에 덜 노출된다.

  

- Node.js에서 모듈을 정의하는 가장 일반적인 패턴은 함수나 생성자와 같이 하나의 핵심 기능을 표현하는 동시에, 더 많은 고급 기능이나 보조 기능은 노출된 함수나 생성자의 속성이 되도록 하는 것. 이를 통해 사용자는 중요한 내용과 부수적인 내용을 구분할 수 있음

- Node.js 모듈이 또다른 특성은 확장 용도보다는 실제 사용하도록 만들어 진다는 것이다. 모듈의 확장 가능성을 금지시켜 모듈의 내부를 잠그는 것이 유연하지 않을 수도 있지만 실제로는 유스케이스를 줄이고, 구현을 단순화하며, 유지 관리를 용이하게 하고, 가용성으 높이는 장점이 있다.

### 1.1.4 간결함과 실용주의

- 단순한 설계는 여러 가지 이유로 완벽한 모든 기능을 가진 소프트웨어에 비해 훌륭한 원칙이 된다.
- 구현하는데 소요되는 노력과 자원을 적게 사용하여 더 빨리 보급할 수 있고 적응과 유지보수 및 이해가 쉽다.
- 이러한 요인들은 커뮤니티의 기여도를 높이고, 소프트웨어 자체가 성장하고 향상될 수 있도록 한다.

**사실 우리의 소프트웨어는 항상 현실의 근사치이며, 막대한 노력과 많은 코드를 유지하면서 거의 완벽한 소프트웨어를 만드려고 노력하는 것보다는 합리적 수준의 복잡성을 가지고 더 빨리 작업하는 것이 더 큰 성공이다.**